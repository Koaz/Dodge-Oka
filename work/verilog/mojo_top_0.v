/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg outled,
    input [4:0] io_button,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input leftButton,
    input rightButton,
    input startButton
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_2 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [16-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_rst;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_3 dec_ctr (
    .clk(clk),
    .rst(M_dec_ctr_rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [1-1:0] M_matrix_output_spi_miso;
  wire [4-1:0] M_matrix_output_spi_channel;
  wire [1-1:0] M_matrix_output_avr_rx;
  wire [1-1:0] M_matrix_output_out;
  wire [10-1:0] M_matrix_output_score;
  wire [1-1:0] M_matrix_output_reset;
  matrix_output_4 matrix_output (
    .clk(clk),
    .rst(rst),
    .leftBtn(leftButton),
    .rightBtn(rightButton),
    .startBtn(startButton),
    .spi_miso(M_matrix_output_spi_miso),
    .spi_channel(M_matrix_output_spi_channel),
    .avr_rx(M_matrix_output_avr_rx),
    .out(M_matrix_output_out),
    .score(M_matrix_output_score),
    .reset(M_matrix_output_reset)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_5 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    outled = M_matrix_output_out;
    M_dec_ctr_rst = M_matrix_output_reset;
    M_edge_detector_in = M_matrix_output_score;
    M_dec_ctr_inc = M_edge_detector_out;
    M_seg_values = M_dec_ctr_digits;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
  end
endmodule
