/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module sprite_10 (
    input clk,
    input rst,
    input [0:0] button_l,
    input [0:0] button_r,
    output reg [191:0] fillup,
    input [0:0] startBtn
  );
  
  
  
  wire [16-1:0] M_alu_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_7 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .alu_out(M_alu_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  localparam XOR = 6'h16;
  
  localparam SHL = 6'h20;
  
  localparam SHR = 6'h21;
  
  wire [1-1:0] M_button_left_out;
  reg [1-1:0] M_button_left_in;
  button_conditioner_8 button_left (
    .clk(clk),
    .in(M_button_left_in),
    .out(M_button_left_out)
  );
  wire [1-1:0] M_button_right_out;
  reg [1-1:0] M_button_right_in;
  button_conditioner_8 button_right (
    .clk(clk),
    .in(M_button_right_in),
    .out(M_button_right_out)
  );
  wire [1-1:0] M_button_start_out;
  reg [1-1:0] M_button_start_in;
  button_conditioner_8 button_start (
    .clk(clk),
    .in(M_button_start_in),
    .out(M_button_start_out)
  );
  wire [1-1:0] M_start_edge_out;
  reg [1-1:0] M_start_edge_in;
  edge_detector_2 start_edge (
    .clk(clk),
    .in(M_start_edge_in),
    .out(M_start_edge_out)
  );
  wire [1-1:0] M_left_edge_out;
  reg [1-1:0] M_left_edge_in;
  edge_detector_2 left_edge (
    .clk(clk),
    .in(M_left_edge_in),
    .out(M_left_edge_out)
  );
  wire [1-1:0] M_right_edge_out;
  reg [1-1:0] M_right_edge_in;
  edge_detector_2 right_edge (
    .clk(clk),
    .in(M_right_edge_in),
    .out(M_right_edge_out)
  );
  wire [8-1:0] M_regs_out;
  reg [1-1:0] M_regs_en;
  reg [1-1:0] M_regs_addr;
  reg [8-1:0] M_regs_data;
  registerSetup_20 regs (
    .clk(clk),
    .rst(rst),
    .en(M_regs_en),
    .addr(M_regs_addr),
    .data(M_regs_data),
    .out(M_regs_out)
  );
  
  localparam IDLE_new_fsm = 2'd0;
  localparam LEFT_new_fsm = 2'd1;
  localparam RIGHT_new_fsm = 2'd2;
  localparam INTERIM_STATE_new_fsm = 2'd3;
  
  reg [1:0] M_new_fsm_d, M_new_fsm_q = IDLE_new_fsm;
  
  reg start;
  
  reg left;
  
  reg right;
  
  localparam STARTING_POS = 8'h18;
  
  reg [7:0] rowout;
  
  integer i;
  
  localparam B = 24'hff0000;
  
  localparam G = 24'h0000ff;
  
  always @* begin
    M_new_fsm_d = M_new_fsm_q;
    
    M_button_left_in = button_l;
    M_button_right_in = button_r;
    M_left_edge_in = M_button_left_out;
    M_right_edge_in = M_button_right_out;
    left = M_left_edge_out;
    right = M_right_edge_out;
    M_button_start_in = startBtn;
    M_start_edge_in = M_button_start_out;
    start = M_start_edge_out;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 1'h0;
    M_regs_addr = 1'h0;
    M_regs_en = 1'h0;
    M_regs_data = 8'h00;
    
    case (M_new_fsm_q)
      IDLE_new_fsm: begin
        M_regs_en = 1'h1;
        M_regs_data = 8'h18;
        M_new_fsm_d = INTERIM_STATE_new_fsm;
      end
      LEFT_new_fsm: begin
        if (M_regs_out[7+0-:1] != 1'h1) begin
          M_alu_a = M_regs_out;
          M_alu_b = 1'h1;
          M_alu_alufn = 6'h20;
          M_regs_en = 1'h1;
          M_regs_data = M_alu_alu_out;
        end
        rowout = M_regs_out;
        M_new_fsm_d = INTERIM_STATE_new_fsm;
      end
      RIGHT_new_fsm: begin
        if (M_regs_out[0+0-:1] != 1'h1) begin
          M_regs_en = 1'h1;
          M_alu_a = M_regs_out;
          M_alu_b = 1'h1;
          M_alu_alufn = 6'h21;
          M_regs_data = M_alu_alu_out;
        end
        rowout = M_regs_out;
        M_new_fsm_d = INTERIM_STATE_new_fsm;
      end
      INTERIM_STATE_new_fsm: begin
        M_alu_a = left;
        M_alu_b = right;
        M_alu_alufn = 6'h16;
        if (left != 1'h1 && M_alu_alu_out != 1'h1) begin
          rowout = M_regs_out;
          M_new_fsm_d = INTERIM_STATE_new_fsm;
        end else begin
          if (left == 1'h1 && M_alu_alu_out == 1'h1) begin
            M_new_fsm_d = LEFT_new_fsm;
          end
        end
        if (right != 1'h1 && M_alu_alu_out != 1'h1) begin
          rowout = M_regs_out;
          M_new_fsm_d = INTERIM_STATE_new_fsm;
        end
        if (right == 1'h1 && M_alu_alu_out == 1'h1) begin
          M_new_fsm_d = RIGHT_new_fsm;
        end
        if (start) begin
          M_new_fsm_d = IDLE_new_fsm;
        end
      end
    endcase
    for (i = 1'h0; i < 4'h8; i = i + 1) begin
      if (M_regs_out[(i)*1+0-:1]) begin
        fillup[(i)*24+23-:24] = 24'h0000ff;
      end else begin
        fillup[(i)*24+23-:24] = 24'hff0000;
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_new_fsm_q <= 1'h0;
    end else begin
      M_new_fsm_q <= M_new_fsm_d;
    end
  end
  
endmodule
